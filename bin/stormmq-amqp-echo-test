#!/usr/bin/env ruby
# encoding: utf-8
#--
# Copyright (c) 2010, Tony Byrne & StormMQ Ltd.
# All rights reserved.
#
# Please refer to the LICENSE file that accompanies this source
# for terms of use and redistribution.
#++

$:.unshift File.join(File.expand_path(File.dirname(__FILE__)), "..", "lib")

require 'stormmq/amqp'
require 'stormmq/application'

class StormMQ::Application::AMQPEchoTest < StormMQ::Application

  def initialize
    synopsis  "--help | --company <companyName> --system <systemName> --environment <environmentName> --amqpUser <amqpUserName> --amqpPassword <amqpUserPassword> [--host <host>] [--port <port>] [--debug]"
    options :help, :debug

    option  :names           => %w(--host),
            :opt_description => "server to connect to - defaults to 'amqp.stormmq.com'",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => 'amqp.stormmq.com'

    option  :names           => %w(--port),
            :opt_description => "SSL port on server to connect to - defaults to '443'",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => '443'

    option  :names           => %w(--amqpUser -u),
            :opt_description => "a valid user name, i.e. the login you use at http://stormmq.com/",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

    option  :names           => %w(--amqpPassword -p),
            :opt_description => "Base64 encoded password, e.g. 'BNuWk1agaAUPTZ15sx44kHvNkTnJXsevqTjIo1M1iwFOeNaUqr3qPn75Dnk=='",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

    option  :names           => %w(--company -c),
            :opt_description => "your company identifier, usually the same as --amqpUser",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

    option  :names           => %w(--system -s),
            :opt_description => "your system, usually the same as --amqpUser",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

    option  :names           => %w(--environment -e),
            :opt_description => "the environment to use, e.g 'production', 'development', or 'testing'",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

  end

  def main

    EM.run do

      puts "creating connection"
      connection = StormMQ::AMQPClient.connect(
        :user        => opt.amqpUser,
        :password    => opt.amqpPassword,
        :company     => opt.company,
        :system      => opt.system,
        :environment => opt.environment,
        :host        => opt.host,
        :port        => opt.port,
        :logging     => opt['--debug']
      )

      puts "opening a channel on the A MQP connection"
      channel = MQ.new(connection)

      puts "declaring a queue on the channel"
      queue = MQ::Queue.new(channel, 'test queue')

      puts "creating a test exchange"
      exchange = MQ::Exchange.new(channel, :direct, 'test exchange')

      puts "binding the queue the the exchange"
      queue.bind(exchange)

      puts "publishing test message to the exchange"
      exchange.publish('hello world')

      puts "subsribing to the queue"
      queue.subscribe do |headers, msg|
        puts "recevied message from the queue:"
        pp headers
        puts msg
        puts msg == 'hello world' ? 'Succeeded' : 'Failed'
        connection.close{ EM.stop_event_loop }
      end

    end

  end

  def man
    <<-EOM
NAME

  #{File.basename(__FILE__)}

PURPOSE

  Tests connections to our AMQP servers (default: amqp.stormmq.com)
  to try to troubleshoot problems with users, passwords and SSL.

USAGE

  #{File.basename(__FILE__)} --help
  #{File.basename(__FILE__)} --company <companyName> --system <systemName> --environment <environmentName> --amqpUser <amqpUserName> --amqpPassword <amqpUserPassword>

PARAMETERS

  <systemName>

    If you're not sure if you've already created a system, use:

    stormmq-list-systems <userName>

    Note: A systemName can not contain a '/' or ':'

  <companyName>

    For ordinary users, this is the same as your userName. If you're
    not sure of your companyName, you can retrieve it with:

    stormmq-list-companies <userName>

  <environmentName>

    One of:

      * development
      * testing
      * production

    for the default system created when you signed up, or for any
    system created by stormmq-create-system <userName>
    (except advanced use).

  <amqpUserName>

    This is your userName for the default system we created when you
    signed up, or for any system created by
    stormmq-create-system <userName> (except advanced use).

  <amqpUserPassword>

   Retrieve this using:

   stormmq-get-amqpuser-password <userName> <companyName> <systemName> \\
      <environmentName> <amqpUserName>

  --help, -h

    Displays this help page then quits.

  --debug, -d

    Display dialogue between client and server.

  --host

    Specify the amqp server to connect to. Defaults to:

      amqp.stormmq.com

  --port

    Specify the port on the amqp server to connect to.

RESULT

  Outputs test results to STDOUT.

NOTES

  For a default system, you'll just need your userName.

COPYRIGHT

  Copyright (c) 2010, Tony Byrne & StormMQ Ltd.
  All rights reserved.

    EOM
  end

end

StormMQ::Application::AMQPEchoTest.run