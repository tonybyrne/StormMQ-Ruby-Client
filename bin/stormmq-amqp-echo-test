#!/usr/bin/env ruby
# encoding: utf-8
#--
# Copyright (c) 2010, Tony Byrne & StormMQ Ltd.
# All rights reserved.
#
# Please refer to the LICENSE file that accompanies this source
# for terms of use and redistribution.
#++

$:.unshift File.dirname(__FILE__) + '/../lib'
require 'rubygems'
require 'commandline'
require 'commandline/optionparser'
require 'stormmq'

class StormMQAMQPEchoTest < CommandLine::Application

  def initialize
    author    "Tony Byrne"
    copyright "Tony Byrne, 2010"
    synopsis  "--amqpUser USER --amqpPassword PASSWORD --company COMPANY --system SYSTEM --environment ENVIRONMENT [--host HOST] [--port PORT]"
    short_description "Verifies the ability to interact with StormMQ's message cloud service"
    long_description  ""
    options :help, :debug

    option  :names           => %w(--host),
            :opt_description => "server to connect to - defaults to 'amqp.stormmq.com'",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => 'amqp.stormmq.com'

    option  :names           => %w(--port),
            :opt_description => "SSL port on server to connect to - defaults to '443'",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => '443'

    option  :names           => %w(--amqpUser -u),
            :opt_description => "a valid user name, i.e. the login you use at http://stormmq.com/",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

    option  :names           => %w(--amqpPassword -p),
            :opt_description => "Base64 encoded password, e.g. 'BNuWk1agaAUPTZ15sx44kHvNkTnJXsevqTjIo1M1iwFOeNaUqr3qPn75Dnk=='",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

    option  :names           => %w(--company -c),
            :opt_description => "your company identifier, usually the same as --amqpUser",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

    option  :names           => %w(--system -s),
            :opt_description => "your system, usually the same as --amqpUser",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

    option  :names           => %w(--environment -e),
            :opt_description => "the environment to use, e.g 'production', 'development', or 'testing'",
            :arity           => [1,1],
            :opt_found       => get_args,
            :opt_not_found   => CommandLine::OptionParser::OPT_NOT_FOUND_BUT_REQUIRED

  end

  def main

    EM.run do

      puts "creating connection"
      connection = StormMQ::AMQPClient.connect(
        :user        => opt.amqpUser,
        :password    => opt.amqpPassword,
        :company     => opt.company,
        :system      => opt.system,
        :environment => opt.environment,
        :host        => opt.host,
        :port        => opt.port,
        :logging     => opt['--debug']
      )

      puts "opening a channel on the A MQP connection"
      channel = MQ.new(connection)

      puts "declaring a queue on the channel"
      queue = MQ::Queue.new(channel, 'test queue')

      puts "creating a test exchange"
      exchange = MQ::Exchange.new(channel, :direct, 'test exchange')

      puts "binding the queue the the exchange"
      queue.bind(exchange)

      puts "publishing test message to the exchange"
      exchange.publish('hello world')

      puts "subsribing to the queue"
      queue.subscribe do |headers, msg|
        puts "recevied message from the queue:"
        pp headers
        puts msg
        puts msg == 'hello world' ? 'Succeeded' : 'Failed'
        connection.close{ EM.stop_event_loop }
      end

    end

  end

end

__END__
